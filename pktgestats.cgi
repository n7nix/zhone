#!/usr/bin/perl -w

# Kielhaven temps

use RRDs;
use POSIX qw(strftime);
use warnings;
use diagnostics;

my $VERSION = "0.1";

############################################################
############## EDIT THESE VALUES BELOW #####################
############################################################

my $xpoints = 650;			 # Graphs width
my $ypoints = 250;			 # Graphs height
my $db_dir = '/media/backup/rrd/var/lib/pkt/rrdpkts'; 	 # DB files directory
my $tmp_dir = '/media/backup/rrd/var/tmp/pktcnt';	 # Images directory
my $scriptname = 'pktgestats.cgi';	 # Script name

############################################################
### YOU SHOULD NOT HAVE TO EDIT ANYTHING BELOW THIS LINE ###
############################################################

my $date = strftime "%a %b %e %Y %I.%M%p", localtime;
my $points_per_sample = 3;
my $ypoints_err = 96;

my $db_ge1rxbytes = "$db_dir/ge1rxbytes.rrd";
my $db_ge1txbytes = "$db_dir/ge1txbytes.rrd";
my $db_ge2rxbytes = "$db_dir/ge2rxbytes.rrd";
my $db_ge2txbytes = "$db_dir/ge2txbytes.rrd";
my $db_ge3rxbytes = "$db_dir/ge3rxbytes.rrd";
my $db_ge3txbytes = "$db_dir/ge3txbytes.rrd";
my $db_ge4rxbytes = "$db_dir/ge4rxbytes.rrd";
my $db_ge4txbytes = "$db_dir/ge4txbytes.rrd";

#$byte_units='Bytes';
$byte_units='';

my @graphs = (
	      { title => 'Daily Graphs',   seconds => 3600*24,        },
	      { title => 'Weekly Graphs',  seconds => 3600*24*7,      },
	      { title => 'Monthly Graphs', seconds => 3600*24*31,     },
	      { title => 'Yearly Graphs',  seconds => 3600*24*365, },
	     );

sub graph_statistics($$$)
{
	my $range = shift;
	my $file = shift;
	my $title = shift;
	my $step = $range*$points_per_sample/$xpoints;

	my ($graphret,$xs,$ys) = RRDs::graph($file,
		'--imgformat', 'PNG',
		'--width', $xpoints,
		'--height', $ypoints,
		'--start', "-$range",
		"--title=  Packets on Gig Eth",
		'--vertical-label', "Bytes",
		'--units-exponent', 0,
		'--lazy',
		'-Y',

		"DEF:ge1rxbytes_c=$db_ge1rxbytes:ge1rxbytes:AVERAGE",
		"DEF:ge1txbytes_c=$db_ge1txbytes:ge1txbytes:AVERAGE",
		"DEF:ge2rxbytes_c=$db_ge2rxbytes:ge2rxbytes:AVERAGE",
		"DEF:ge2txbytes_c=$db_ge2txbytes:ge2txbytes:AVERAGE",
		"DEF:ge3rxbytes_c=$db_ge3rxbytes:ge3rxbytes:AVERAGE",
		"DEF:ge3txbytes_c=$db_ge3txbytes:ge3txbytes:AVERAGE",
		"DEF:ge4rxbytes_c=$db_ge4rxbytes:ge4rxbytes:AVERAGE",
		"DEF:ge4txbytes_c=$db_ge4txbytes:ge4txbytes:AVERAGE",
		"COMMENT:                                Min            Max           Avg           Last\\n",
		'LINE1:ge1rxbytes_c#DA0323:GigE1 Receive Bytes   ',
  	        "GPRINT:ge1rxbytes_c:MIN: %9.3lf%s $byte_units",
		"GPRINT:ge1rxbytes_c:MAX: %9.3lf%s $byte_units",
		"GPRINT:ge1rxbytes_c:AVERAGE: %9.3lf%s $byte_units",
		"GPRINT:ge1rxbytes_c:LAST: %9.3lf%s $byte_units\\n",
		'LINE1:ge1txbytes_c#890317:GigE1 Transmit Bytes  ',
  	        "GPRINT:ge1txbytes_c:MIN: %9.3lf%s $byte_units",
		"GPRINT:ge1txbytes_c:MAX: %9.3lf%s $byte_units",
		"GPRINT:ge1txbytes_c:AVERAGE: %9.3lf%s $byte_units",
		"GPRINT:ge1txbytes_c:LAST: %9.3lf%s $byte_units\\n",

		'LINE1:ge2rxbytes_c#CA03DA:GigE2 Receive Bytes   ',
  	        "GPRINT:ge2rxbytes_c:MIN: %9.3lf%s $byte_units",
		"GPRINT:ge2rxbytes_c:MAX: %9.3lf%s $byte_units",
		"GPRINT:ge2rxbytes_c:AVERAGE: %9.3lf%s $byte_units",
		"GPRINT:ge2rxbytes_c:LAST: %9.3lf%s $byte_units\\n",
		'LINE1:ge2txbytes_c#890394:GigE2 Transmit Bytes  ',
  	        "GPRINT:ge2txbytes_c:MIN: %9.3lf%s $byte_units",
		"GPRINT:ge2txbytes_c:MAX: %9.3lf%s $byte_units",
		"GPRINT:ge2txbytes_c:AVERAGE: %9.3lf%s $byte_units",
		"GPRINT:ge2txbytes_c:LAST: %9.3lf%s $byte_units\\n",

		'LINE1:ge3rxbytes_c#618ee9:GigE3 Receive Bytes   ',
  	        "GPRINT:ge3rxbytes_c:MIN: %9.3lf%s $byte_units",
		"GPRINT:ge3rxbytes_c:MAX: %9.3lf%s $byte_units",
		"GPRINT:ge3rxbytes_c:AVERAGE: %9.3lf%s $byte_units",
		"GPRINT:ge3rxbytes_c:LAST: %9.3lf%s $byte_units\\n",
		'LINE1:ge3txbytes_c#031694:GigE3 Transmit Bytes  ',
  	        "GPRINT:ge3txbytes_c:MIN: %9.3lf%s $byte_units",
		"GPRINT:ge3txbytes_c:MAX: %9.3lf%s $byte_units",
		"GPRINT:ge3txbytes_c:AVERAGE: %9.3lf%s $byte_units",
		"GPRINT:ge3txbytes_c:LAST: %9.3lf%s $byte_units\\n",

		'LINE1:ge4rxbytes_c#65E961:GigE4 Receive Bytes   ',
  	        "GPRINT:ge4rxbytes_c:MIN: %9.3lf%s $byte_units",
		"GPRINT:ge4rxbytes_c:MAX: %9.3lf%s $byte_units",
		"GPRINT:ge4rxbytes_c:AVERAGE: %9.3lf%s $byte_units",
		"GPRINT:ge4rxbytes_c:LAST: %9.3lf%s $byte_units\\n",
		'LINE1:ge4txbytes_c#055D02:GigE4 Transmit Bytes  ',
  	        "GPRINT:ge4txbytes_c:MIN: %9.3lf%s $byte_units",
		"GPRINT:ge4txbytes_c:MAX: %9.3lf%s $byte_units",
		"GPRINT:ge4txbytes_c:AVERAGE: %9.3lf%s $byte_units",
		"GPRINT:ge4txbytes_c:LAST: %9.3lf%s $byte_units\\n",
		"COMMENT: \\n",
		"COMMENT:Generated by Packet Stats $VERSION - $date",
	);

	my $ERR=RRDs::error;
	die "ERROR: $ERR\n" if $ERR;
}


sub print_html()
{
	print "Content-Type: text/html\n\n";

	print <<HEADER;
<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html>
<head>
<title>Packet Statistics on Zhone</title>
<meta http-equiv="pragma" content="no-cache"/>
<meta http-equiv="refresh" content="600"/>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"/>
<style type="text/css">

body
{
	background-color: #6e73b5;
#	background-color: #ABABAB;
#	background-color: #333399;
#color: #737367;
#color: #ffff00;
color: #000000;
	font-size: 11px;
	margin: 0px;
	padding: 0px;
	text-align: center;
	font-family: arial, helvetica, sans-serif;
}

a
{
	text-decoration: none;
	color: #464646;
	background-color: #6e73b5;
#	background-color: #ABABAB;
}

a:visited
{
	color: #59594F;
	background-color: #6e73b5;
#	background-color: #ABABAB;
}

a:hover
{
	color: #FF6633;
	background-color: #6e73b5;
#	background-color: #ABABAB;
}

a:active
{
	color: #444444;
	background-color: #6e73b5;
#	background-color: #ABABAB;
}

.graphtitle
{
	background-color: #dddddd;
	color: #222222;
	width: 780px;
	margin: 0 auto;
}

.page_header
{
	margin-top: 0px;
	padding-top: 25px;
}

.page_footer
{
	margin-bottom: 10px;
	padding-top: 0px;
}

</style>
</head>
<body>
HEADER
	print "<h1>Zhone Gig E Traffic Stats</h1>\n";
	print "<h3>Reading Router Statistics</h3>\n";

	display_current();

	for my $n (0..$#graphs) {
		print "<div class=\"graphtitle\"><h2>".$graphs[$n]{title}."</h2></div>\n";
		print "<p><img src=\"$scriptname?${n}-statistics\" alt=\"RRDgePackets\"/></p>\n";
	}


	print <<FOOTER;
<table border="0" width="100%" cellpadding="0" cellspacing="0"><tr><td align="center">
 <a href="http://www.nwdigitalradio.com/" onclick="window.open(this.href); return false;">UDR56k-4</a>
<a> $VERSION by</a>
<a href="http://www.nwdigitalradio.com" onclick="window.open(this.href); return false;">NW Digital Radio</a></td></tr>
</table>
FOOTER
}

sub print_val($)
{
	my $val = shift;
	$hash = RRDs::info "$val";
	foreach my $key (keys %$hash){
		if($key =~ /last_ds/){
			print " 			<td>$$hash{$key}</td>";
		}
	}
}
sub print_row($$){
	my $title = shift;
	my $val = shift;

	print "				<tr>\n";
	print "					<td>$title</td>\n";
	print_val("$val");
	print "				</tr>\n";
	print " 			<tr>\n";
}

sub display_current()
{

	my $cur_time = time();           # set current time
	my $end_time = $cur_time;        # set end time to now
	my $start_time = $end_time - 10; # set start to now minus 10

	print " 	<table style=\"background-color: rgb(214, 255, 209);font-family: Arial;color: #000000;text-align: right; margin-left: auto; margin-right: auto; width: 20%;\" border=\"2\"\n";
#	print "table style=\"background-color: rgb(214, 255, 209); width: 742px; height: 71px; text-align: right; margin-left: auto; margin-right: auto;\"\n";
	print " 		cellpadding=\"2\" cellspacing=\"2\">\n";
	print " 		<tbody>\n";

	print_row("GE1 RX Bytes", "$db_ge1rxbytes");
	print_row("GE1 TX Bytes", "$db_ge1txbytes");
	print_row("GE2 RX Bytes", "$db_ge2rxbytes");
	print_row("GE2 TX Bytes", "$db_ge2txbytes");
	print_row("GE3 RX Bytes", "$db_ge3rxbytes");
	print_row("GE3 TX Bytes", "$db_ge3txbytes");
	print_row("GE4 RX Bytes", "$db_ge4rxbytes");
	print_row("GE4 TX Bytes", "$db_ge4txbytes");

	print " 			</tbody>\n";
	print " 			</table>\n";
}

sub send_image($)
{
	my $file = shift;
	-r $file or do {
		print "Content-type: text/plain\n\nERROR: can't find $file\n";
		exit 1;
	};

	print "Content-type: image/png\n";
	print "Content-length: ".((stat($file))[7])."\n";
	print "\n";
	open(IMG, $file) or die;
	my $data;
	print $data while read IMG, $data, 1024;
}

sub main()
{
	mkdir $tmp_dir, 0777 unless -d $tmp_dir;

	my $img = $ENV{QUERY_STRING};
	if(defined $img and $img =~ /\S/) {
		if($img =~ /^(\d+)-statistics$/) {
			my $file = "$tmp_dir/RRDgePackets_$1_statistics.png";
			graph_statistics($graphs[$1]{seconds}, $file, $graphs[$1]{title});
			send_image($file);
		} else {
			die "ERROR: invalid argument\n";
		}
	}
	else {
		print_html;
	}
}

main;
